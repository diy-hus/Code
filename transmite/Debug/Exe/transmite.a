;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdbool.h>
;
;#define         tc_1    PIND.0  // 1st Proximity sensor
;#define         tc_2    PIND.1  // 2nd Proximity sensor
;char            P_Add               = 0x53;
;bool            triggered_sensor_1  = false; // Active sensor state
;unsigned int    time_s              = 0;
;unsigned int    time_ms             = 0;
;unsigned int    timestamp           = 0;
;unsigned int    total_time          = 0;
;unsigned char   payload             = 0;
;#include "rf.c"
;#define CE PORTC.0      //23
;#define CSN PORTC.1     //24
;#define SCK PORTC.2     //25
;#define MOSI PORTC.3    //26
;#define MISO PINC.4     //27
;#define IRQ PINC.5      //28
;
;
;unsigned char SPI_RW(unsigned char Buff);                                       //Function used for text moving
;void RF_Init();                                                                 //Function allow to Initialize RF device
;void RF_Write(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a registe ...
;void RF_Write_Address(unsigned char Address);                                   //Function to write TX and RX address
;void RX_Mode_Active();                                                          //Function to put nRF in RX mode
;void TX_Mode_Active();                                                          //Function to put nRF in TX mode
;void RF_Config();                                                               //Function to config the nRF
;void RF_TX_send(unsigned char RX_Address, unsigned char Value);                 //Function to send data Value to a speci ...
;
;unsigned char SPI_RW(unsigned char Buff)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    unsigned char bit_ctr;
;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	Buff -> Y+1
;	bit_ctr -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;       {
;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;        delay_us(5);
;PCODE: $00000024 VOL: 0
;        Buff = (Buff << 1);           // shift next bit into MSB..
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;        SCK = 1;                      // Set SCK high..
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;        delay_us(5);
;PCODE: $0000002A VOL: 0
;        Buff |= MISO;                 // capture current MISO bit
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;        SCK = 0;                      // ..then set SCK low again
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;       }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;    return(Buff);                     // return read uchar
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;}
;PCODE: $0000003C VOL: 0
;
;void RF_Init()                                                    //Function allow to Initialize RF device
;{
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;    CE=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;    delay_us(700);
;PCODE: $00000041 VOL: 0
;    CE=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;    CSN=1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;}
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;void RF_Write(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
;{
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;    CSN=0;
;PCODE: $0000004A VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;    SPI_RW(0b00100000|Reg_Add);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;    SPI_RW(Value);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;    CSN=1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;    delay_us(10);
;PCODE: $00000055 VOL: 0
;}
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;void RF_Write_Address(unsigned char Address)                      //Function to write TX and RX address
;{
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;    CSN=0;
;PCODE: $0000005B VOL: 0
;	Address -> Y+0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;    RF_Write(0x03,0b00000011);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;    CSN=1;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;    delay_us(10);
;PCODE: $00000064 VOL: 0
;    CSN=0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;    SPI_RW(0b00100000|0x0A);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;    SPI_RW(Address);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;    SPI_RW(Address);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;    SPI_RW(Address);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;    SPI_RW(Address);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;    SPI_RW(Address);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;    CSN=1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;    delay_us(10);
;PCODE: $00000075 VOL: 0
;    CSN=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;    SPI_RW(0b00100000|0x10);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;    SPI_RW(Address);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;    SPI_RW(Address);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;    SPI_RW(Address);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;    SPI_RW(Address);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;    SPI_RW(Address);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;    CSN=1;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;    delay_us(10);
;PCODE: $00000086 VOL: 0
;}
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;
;void RX_Mode_Active()                                             //Function to put nRF in RX mode
;{
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;    RF_Write(0x00,0b00011111);     //CONFIG 0x00
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;    CE=1;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;}
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;void TX_Mode_Active()                                             //Function to put nRF in TX mode
;{
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;    CE=0;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;    RF_Write(0x00,0b00011110);     //CONFIG 0x00
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;}
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;
;void RF_Config()                                                  //Function to config the nRF
;{
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;delay_us(10);
;PCODE: $000000A0 VOL: 0
;RF_Write(0x00,0b00011111);     //CONFIG 0x00
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;delay_ms(2);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;RF_Write(0x07,0b01111110);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;RF_Write(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;RF_Write(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;RF_Write_Address(P_Add);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;RF_Write(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;RF_Write(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;RF_Write(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;}
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;void RF_TX_send(unsigned char RX_Address, unsigned char Value)     //Function to send data Value to a specify RX Address
;{
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; {
;PCODE: $000000C6 VOL: 0
;	RX_Address -> Y+1
;	Value -> Y+0
;  RF_Write_Address(RX_Address);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;  CSN=1;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;  delay_us(10);
;PCODE: $000000CB VOL: 0
;  CSN=0;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;  SPI_RW(0b11100001);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;  CSN=1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;  delay_us(10);
;PCODE: $000000D2 VOL: 0
;  CSN=0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;  SPI_RW(0b10100000);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;  SPI_RW(Value);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;  CSN=1;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;  CE=1;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;  delay_us(500);
;PCODE: $000000DD VOL: 0
;  CE=0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;  RF_Write(0x07,0b01111110);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;  RF_Write_Address(P_Add);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;  }
;}
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
; 0000 0010 interrupt [10] void timer0_ovf_isr(void) {
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0011     TCNT0=0xB2; //10ms
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0012 	if (triggered_sensor_1)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0013     {
; 0000 0014         time_ms += 10;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0015         if (time_ms % 1000 == 0) //1000 ms = 1s
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0016             {
; 0000 0017                 time_s++;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0018             }
; 0000 0019     }
;PCODE: $000000FB VOL: 0
; 0000 001A }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;
;void main(void)
; 0000 001D {
;PCODE: $00000100 VOL: 0
; 0000 001E 
; 0000 001F DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0020 PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0021 
; 0000 0022 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0023 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0024 
; 0000 0025 TCCR0=(1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0026 TCNT0=0xB2;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0027 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0028 #asm("sei")
;PCODE: $0000010F VOL: 0
	sei
;PCODE: $00000110 VOL: 0
; 0000 0029 RF_Init();
;PCODE: $00000111 VOL: 0
; 0000 002A RF_Config();
;PCODE: $00000112 VOL: 0
; 0000 002B RX_Mode_Active();
;PCODE: $00000113 VOL: 0
; 0000 002C while (1)
;PCODE: $00000114 VOL: 0
; 0000 002D       {
; 0000 002E         TX_Mode_Active();
;PCODE: $00000115 VOL: 0
; 0000 002F         if (tc_1==0)
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0030             {
; 0000 0031                 if (!triggered_sensor_1) { //only trigger state in the first time
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0032                     triggered_sensor_1 = true;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0033                     timestamp = time_s;    //mark current time
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0034                 }
; 0000 0035             }
;PCODE: $0000011F VOL: 0
; 0000 0036         if (tc_2==0)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0037             {
; 0000 0038                 if (triggered_sensor_1) //both sensors are triggered
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0039                     {
; 0000 003A                         total_time = time_s - timestamp; //time span between 2 sensors are triggered
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 003B                         if (total_time < 2)
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 003C                             {
; 0000 003D                                 payload=1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 003E                             }
; 0000 003F                         else
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0040                             {
; 0000 0041                                 payload=0;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0042                             }
;PCODE: $00000132 VOL: 0
; 0000 0043                         triggered_sensor_1 = false; //reset sensor state
;PCODE: $00000133 VOL: 0
; 0000 0044                     }
; 0000 0045 
; 0000 0046             }
;PCODE: $00000134 VOL: 0
; 0000 0047         RF_TX_send(P_Add,payload);   // send command to receiver.
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0048         delay_ms(1);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0049       }
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 004A }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
