
AVRASM ver. 2.1.30  D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm Mon Aug 26 15:11:15 2019

D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1086): warning: Register r5 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1087): warning: Register r4 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1088): warning: Register r6 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1089): warning: Register r7 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1090): warning: Register r8 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1091): warning: Register r9 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1092): warning: Register r10 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1093): warning: Register r11 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1094): warning: Register r12 already defined by the .DEF directive
D:\Dropbox\2019\Project\Singapore\Code\transmite\Debug\List\transmite.asm(1095): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8A
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _P_Add=R5
                 	.DEF _triggered_sensor_1=R4
                 	.DEF _time_s=R6
                 	.DEF _time_s_msb=R7
                 	.DEF _time_ms=R8
                 	.DEF _time_ms_msb=R9
                 	.DEF _timestamp=R10
                 	.DEF _timestamp_msb=R11
                 	.DEF _total_time=R12
                 	.DEF _total_time_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01b      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c0c2      	RJMP _timer0_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000013 5300
000014 0000      	.DB  0x0,0x53,0x0,0x0
000015 0000
000016 0000      	.DB  0x0,0x0,0x0,0x0
000017 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000018 000a      	.DW  0x0A
000019 0004      	.DW  0x04
00001a 0026      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001c 94f8      	CLI
00001d 27ee      	CLR  R30
00001e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001f e0f1      	LDI  R31,1
000020 bffb      	OUT  GICR,R31
000021 bfeb      	OUT  GICR,R30
000022 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000023 e08d      	LDI  R24,(14-2)+1
000024 e0a2      	LDI  R26,2
000025 27bb      	CLR  R27
                 __CLEAR_REG:
000026 93ed      	ST   X+,R30
000027 958a      	DEC  R24
000028 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000029 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00002b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00002c 93ed      	ST   X+,R30
00002d 9701      	SBIW R24,1
00002e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002f e3e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000030 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000031 9185      	LPM  R24,Z+
000032 9195      	LPM  R25,Z+
000033 9700      	SBIW R24,0
000034 f061      	BREQ __GLOBAL_INI_END
000035 91a5      	LPM  R26,Z+
000036 91b5      	LPM  R27,Z+
000037 9005      	LPM  R0,Z+
000038 9015      	LPM  R1,Z+
000039 01bf      	MOVW R22,R30
00003a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003b 9005      	LPM  R0,Z+
00003c 920d      	ST   X+,R0
00003d 9701      	SBIW R24,1
00003e f7e1      	BRNE __GLOBAL_INI_LOOP
00003f 01fb      	MOVW R30,R22
000040 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000041 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000042 bfed      	OUT  SPL,R30
000043 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000044 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000045 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000046 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000047 c0a8      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;
                 ;#define         tc_1    PIND.0  // 1st Proximity sensor
                 ;#define         tc_2    PIND.1  // 2nd Proximity sensor
                 ;char            P_Add               = 0x53;
                 ;bool            triggered_sensor_1  = false; // Active sensor state
                 ;unsigned int    time_s              = 0;
                 ;unsigned int    time_ms             = 0;
                 ;unsigned int    timestamp           = 0;
                 ;unsigned int    total_time          = 0;
                 ;unsigned char   payload             = 0;
                 ;#include "rf.c"
                 ;#define CE PORTC.0      //23
                 ;#define CSN PORTC.1     //24
                 ;#define SCK PORTC.2     //25
                 ;#define MOSI PORTC.3    //26
                 ;#define MISO PINC.4     //27
                 ;#define IRQ PINC.5      //28
                 ;
                 ;
                 ;unsigned char SPI_RW(unsigned char Buff);                                       //Function used for text moving
                 ;void RF_Init();                                                                 //Function allow to Initialize RF device
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value);                      //Function to write a value to a registe ...
                 ;void RF_Write_Address(unsigned char Address);                                   //Function to write TX and RX address
                 ;void RX_Mode_Active();                                                          //Function to put nRF in RX mode
                 ;void TX_Mode_Active();                                                          //Function to put nRF in TX mode
                 ;void RF_Config();                                                               //Function to config the nRF
                 ;void RF_TX_send(unsigned char RX_Address, unsigned char Value);                 //Function to send data Value to a speci ...
                 ;
                 ;unsigned char SPI_RW(unsigned char Buff)
                 ; 0000 000E {
                 
                 	.CSEG
                 _SPI_RW:
                 ; .FSTART _SPI_RW
                 ;    unsigned char bit_ctr;
                 ;       for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
000048 93aa      	ST   -Y,R26
000049 931a      	ST   -Y,R17
                 ;	Buff -> Y+1
                 ;	bit_ctr -> R17
00004a e010      	LDI  R17,LOW(0)
                 _0x4:
00004b 3018      	CPI  R17,8
00004c f4c8      	BRSH _0x5
                 ;       {
                 ;        MOSI = (Buff & 0x80);         // output 'uchar', MSB to MOSI
00004d 81e9      	LDD  R30,Y+1
00004e 78e0      	ANDI R30,LOW(0x80)
00004f f411      	BRNE _0x6
000050 98ab      	CBI  0x15,3
000051 c001      	RJMP _0x7
                 _0x6:
000052 9aab      	SBI  0x15,3
                 _0x7:
                 ;        delay_us(5);
                +
000053 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000054 958a     +DEC R24
000055 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff = (Buff << 1);           // shift next bit into MSB..
000056 81e9      	LDD  R30,Y+1
000057 0fee      	LSL  R30
000058 83e9      	STD  Y+1,R30
                 ;        SCK = 1;                      // Set SCK high..
000059 9aaa      	SBI  0x15,2
                 ;        delay_us(5);
                +
00005a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00005b 958a     +DEC R24
00005c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ;        Buff |= MISO;                 // capture current MISO bit
00005d e0e0      	LDI  R30,0
00005e 999c      	SBIC 0x13,4
00005f e0e1      	LDI  R30,1
000060 81a9      	LDD  R26,Y+1
000061 2bea      	OR   R30,R26
000062 83e9      	STD  Y+1,R30
                 ;        SCK = 0;                      // ..then set SCK low again
000063 98aa      	CBI  0x15,2
                 ;       }
000064 5f1f      	SUBI R17,-1
000065 cfe5      	RJMP _0x4
                 _0x5:
                 ;    return(Buff);                     // return read uchar
000066 81e9      	LDD  R30,Y+1
000067 8118      	LDD  R17,Y+0
000068 c061      	RJMP _0x2000001
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Init()                                                    //Function allow to Initialize RF device
                 ;{
                 _RF_Init:
                 ; .FSTART _RF_Init
                 ;    CE=1;
000069 9aa8      	SBI  0x15,0
                 ;    delay_us(700);
                +
00006a e788     +LDI R24 , LOW ( 1400 )
00006b e095     +LDI R25 , HIGH ( 1400 )
                +__DELAY_USW_LOOP :
00006c 9701     +SBIW R24 , 1
00006d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1400
                 ;    CE=0;
00006e 98a8      	CBI  0x15,0
                 ;    CSN=1;
00006f 9aa9      	SBI  0x15,1
                 ;}
000070 9508      	RET
                 ; .FEND
                 ;void RF_Write(unsigned char Reg_Add, unsigned char Value)         //Function to write a value to a register address
                 ;{
                 _RF_Write:
                 ; .FSTART _RF_Write
                 ;    CSN=0;
000071 93aa      	ST   -Y,R26
                 ;	Reg_Add -> Y+1
                 ;	Value -> Y+0
000072 98a9      	CBI  0x15,1
                 ;    SPI_RW(0b00100000|Reg_Add);
000073 81e9      	LDD  R30,Y+1
000074 62e0      	ORI  R30,0x20
000075 2fae      	MOV  R26,R30
000076 d0af      	RCALL SUBOPT_0x0
                 ;    SPI_RW(Value);
                 ;    CSN=1;
000077 d0b1      	RCALL SUBOPT_0x1
                 ;    delay_us(10);
                 ;}
000078 c051      	RJMP _0x2000001
                 ; .FEND
                 ;void RF_Write_Address(unsigned char Address)                      //Function to write TX and RX address
                 ;{
                 _RF_Write_Address:
                 ; .FSTART _RF_Write_Address
                 ;    CSN=0;
000079 93aa      	ST   -Y,R26
                 ;	Address -> Y+0
00007a 98a9      	CBI  0x15,1
                 ;    RF_Write(0x03,0b00000011);
00007b e0e3      	LDI  R30,LOW(3)
00007c 93ea      	ST   -Y,R30
00007d e0a3      	LDI  R26,LOW(3)
00007e dff2      	RCALL _RF_Write
                 ;    CSN=1;
00007f d0a9      	RCALL SUBOPT_0x1
                 ;    delay_us(10);
                 ;    CSN=0;
000080 98a9      	CBI  0x15,1
                 ;    SPI_RW(0b00100000|0x0A);
000081 e2aa      	LDI  R26,LOW(42)
000082 d0a3      	RCALL SUBOPT_0x0
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
000083 d0aa      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
000084 d0a9      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    CSN=1;
000085 d0a3      	RCALL SUBOPT_0x1
                 ;    delay_us(10);
                 ;    CSN=0;
000086 98a9      	CBI  0x15,1
                 ;    SPI_RW(0b00100000|0x10);
000087 e3a0      	LDI  R26,LOW(48)
000088 d09d      	RCALL SUBOPT_0x0
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
000089 d0a4      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    SPI_RW(Address);
00008a d0a3      	RCALL SUBOPT_0x2
                 ;    SPI_RW(Address);
                 ;    CSN=1;
00008b d09d      	RCALL SUBOPT_0x1
                 ;    delay_us(10);
                 ;}
00008c 9621      	ADIW R28,1
00008d 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void RX_Mode_Active()                                             //Function to put nRF in RX mode
                 ;{
                 _RX_Mode_Active:
                 ; .FSTART _RX_Mode_Active
                 ;    RF_Write(0x00,0b00011111);     //CONFIG 0x00
00008e e0e0      	LDI  R30,LOW(0)
00008f 93ea      	ST   -Y,R30
000090 e1af      	LDI  R26,LOW(31)
000091 dfdf      	RCALL _RF_Write
                 ;    CE=1;
000092 9aa8      	SBI  0x15,0
                 ;}
000093 9508      	RET
                 ; .FEND
                 ;void TX_Mode_Active()                                             //Function to put nRF in TX mode
                 ;{
                 _TX_Mode_Active:
                 ; .FSTART _TX_Mode_Active
                 ;    CE=0;
000094 98a8      	CBI  0x15,0
                 ;    RF_Write(0x00,0b00011110);     //CONFIG 0x00
000095 e0e0      	LDI  R30,LOW(0)
000096 93ea      	ST   -Y,R30
000097 e1ae      	LDI  R26,LOW(30)
000098 c01a      	RJMP _0x2000002
                 ;}
                 ; .FEND
                 ;
                 ;void RF_Config()                                                  //Function to config the nRF
                 ;{
                 _RF_Config:
                 ; .FSTART _RF_Config
                 ;delay_us(10);
                +
000099 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00009a 958a     +DEC R24
00009b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;RF_Write(0x00,0b00011111);     //CONFIG 0x00
00009c e0e0      	LDI  R30,LOW(0)
00009d 93ea      	ST   -Y,R30
00009e e1af      	LDI  R26,LOW(31)
00009f dfd1      	RCALL _RF_Write
                 ;delay_ms(2);
0000a0 e0a2      	LDI  R26,LOW(2)
0000a1 e0b0      	LDI  R27,0
0000a2 d094      	RCALL _delay_ms
                 ;RF_Write(0x07,0b01111110);
0000a3 d08c      	RCALL SUBOPT_0x3
                 ;RF_Write(0x11,0b00000001);     //RX_PW_P0 0x11     Payload size
0000a4 e1e1      	LDI  R30,LOW(17)
0000a5 d08e      	RCALL SUBOPT_0x4
                 ;RF_Write(0x05,0b00000010);     //RF_CH 0x05        Choose frequency channel
0000a6 e0e5      	LDI  R30,LOW(5)
0000a7 93ea      	ST   -Y,R30
0000a8 e0a2      	LDI  R26,LOW(2)
0000a9 dfc7      	RCALL _RF_Write
                 ;RF_Write_Address(P_Add);
0000aa 2da5      	MOV  R26,R5
0000ab dfcd      	RCALL _RF_Write_Address
                 ;RF_Write(0x02,0b00000001);     //EX_RXADDR 0x02    enable data pipe 0;
0000ac e0e2      	LDI  R30,LOW(2)
0000ad d086      	RCALL SUBOPT_0x4
                 ;RF_Write(0x01,0b00000001);     //EN_AA 0x01        enable auto-acknowledgment
0000ae e0e1      	LDI  R30,LOW(1)
0000af d084      	RCALL SUBOPT_0x4
                 ;RF_Write(0x04,0b00000000);     //SETUP_RETR 0x04   Setup retry time
0000b0 e0e4      	LDI  R30,LOW(4)
0000b1 93ea      	ST   -Y,R30
0000b2 e0a0      	LDI  R26,LOW(0)
                 _0x2000002:
0000b3 dfbd      	RCALL _RF_Write
                 ;}
0000b4 9508      	RET
                 ; .FEND
                 ;void RF_TX_send(unsigned char RX_Address, unsigned char Value)     //Function to send data Value to a specify RX Address
                 ;{
                 _RF_TX_send:
                 ; .FSTART _RF_TX_send
                 ; {
0000b5 93aa      	ST   -Y,R26
                 ;	RX_Address -> Y+1
                 ;	Value -> Y+0
                 ;  RF_Write_Address(RX_Address);
0000b6 81a9      	LDD  R26,Y+1
0000b7 dfc1      	RCALL _RF_Write_Address
                 ;  CSN=1;
0000b8 d070      	RCALL SUBOPT_0x1
                 ;  delay_us(10);
                 ;  CSN=0;
0000b9 98a9      	CBI  0x15,1
                 ;  SPI_RW(0b11100001);
0000ba eea1      	LDI  R26,LOW(225)
0000bb df8c      	RCALL _SPI_RW
                 ;  CSN=1;
0000bc d06c      	RCALL SUBOPT_0x1
                 ;  delay_us(10);
                 ;  CSN=0;
0000bd 98a9      	CBI  0x15,1
                 ;  SPI_RW(0b10100000);
0000be eaa0      	LDI  R26,LOW(160)
0000bf d066      	RCALL SUBOPT_0x0
                 ;  SPI_RW(Value);
                 ;  CSN=1;
0000c0 9aa9      	SBI  0x15,1
                 ;  CE=1;
0000c1 9aa8      	SBI  0x15,0
                 ;  delay_us(500);
                +
0000c2 ee88     +LDI R24 , LOW ( 1000 )
0000c3 e093     +LDI R25 , HIGH ( 1000 )
                +__DELAY_USW_LOOP :
0000c4 9701     +SBIW R24 , 1
0000c5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1000
                 ;  CE=0;
0000c6 98a8      	CBI  0x15,0
                 ;  RF_Write(0x07,0b01111110);
0000c7 d068      	RCALL SUBOPT_0x3
                 ;  RF_Write_Address(P_Add);
0000c8 2da5      	MOV  R26,R5
0000c9 dfaf      	RCALL _RF_Write_Address
                 ;  }
                 ;}
                 _0x2000001:
0000ca 9622      	ADIW R28,2
0000cb 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0000 0010 interrupt [10] void timer0_ovf_isr(void) {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000cc 920a      	ST   -Y,R0
0000cd 921a      	ST   -Y,R1
0000ce 939a      	ST   -Y,R25
0000cf 93aa      	ST   -Y,R26
0000d0 93ba      	ST   -Y,R27
0000d1 93ea      	ST   -Y,R30
0000d2 93fa      	ST   -Y,R31
0000d3 b7ef      	IN   R30,SREG
0000d4 93ea      	ST   -Y,R30
                 ; 0000 0011     TCNT0=0xB2; //10ms
0000d5 ebe2      	LDI  R30,LOW(178)
0000d6 bfe2      	OUT  0x32,R30
                 ; 0000 0012 	if (triggered_sensor_1)
0000d7 2044      	TST  R4
0000d8 f069      	BREQ _0x34
                 ; 0000 0013     {
                 ; 0000 0014         time_ms += 10;
0000d9 01f4      	MOVW R30,R8
0000da 963a      	ADIW R30,10
0000db 014f      	MOVW R8,R30
                 ; 0000 0015         if (time_ms % 1000 == 0) //1000 ms = 1s
0000dc 01d4      	MOVW R26,R8
0000dd eee8      	LDI  R30,LOW(1000)
0000de e0f3      	LDI  R31,HIGH(1000)
0000df d074      	RCALL __MODW21U
0000e0 9730      	SBIW R30,0
0000e1 f421      	BRNE _0x35
                 ; 0000 0016             {
                 ; 0000 0017                 time_s++;
0000e2 01f3      	MOVW R30,R6
0000e3 9631      	ADIW R30,1
0000e4 013f      	MOVW R6,R30
0000e5 9731      	SBIW R30,1
                 ; 0000 0018             }
                 ; 0000 0019     }
                 _0x35:
                 ; 0000 001A }
                 _0x34:
0000e6 91e9      	LD   R30,Y+
0000e7 bfef      	OUT  SREG,R30
0000e8 91f9      	LD   R31,Y+
0000e9 91e9      	LD   R30,Y+
0000ea 91b9      	LD   R27,Y+
0000eb 91a9      	LD   R26,Y+
0000ec 9199      	LD   R25,Y+
0000ed 9019      	LD   R1,Y+
0000ee 9009      	LD   R0,Y+
0000ef 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001D {
                 _main:
                 ; .FSTART _main
                 ; 0000 001E 
                 ; 0000 001F DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000f0 e0ef      	LDI  R30,LOW(15)
0000f1 bbe4      	OUT  0x14,R30
                 ; 0000 0020 PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
0000f2 e3ef      	LDI  R30,LOW(63)
0000f3 bbe5      	OUT  0x15,R30
                 ; 0000 0021 
                 ; 0000 0022 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000f4 e0ec      	LDI  R30,LOW(12)
0000f5 bbe1      	OUT  0x11,R30
                 ; 0000 0023 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
0000f6 e0e3      	LDI  R30,LOW(3)
0000f7 bbe2      	OUT  0x12,R30
                 ; 0000 0024 
                 ; 0000 0025 TCCR0=(1<<CS02) | (0<<CS01) | (1<<CS00);
0000f8 e0e5      	LDI  R30,LOW(5)
0000f9 bfe3      	OUT  0x33,R30
                 ; 0000 0026 TCNT0=0xB2;
0000fa ebe2      	LDI  R30,LOW(178)
0000fb bfe2      	OUT  0x32,R30
                 ; 0000 0027 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
0000fc e0e1      	LDI  R30,LOW(1)
0000fd bfe9      	OUT  0x39,R30
                 ; 0000 0028 #asm("sei")
0000fe 9478      	sei
                 ; 0000 0029 RF_Init();
0000ff df69      	RCALL _RF_Init
                 ; 0000 002A RF_Config();
000100 df98      	RCALL _RF_Config
                 ; 0000 002B RX_Mode_Active();
000101 df8c      	RCALL _RX_Mode_Active
                 ; 0000 002C while (1)
                 _0x36:
                 ; 0000 002D       {
                 ; 0000 002E         TX_Mode_Active();
000102 df91      	RCALL _TX_Mode_Active
                 ; 0000 002F         if (tc_1==0)
000103 9980      	SBIC 0x10,0
000104 c005      	RJMP _0x39
                 ; 0000 0030             {
                 ; 0000 0031                 if (!triggered_sensor_1) { //only trigger state in the first time
000105 2044      	TST  R4
000106 f419      	BRNE _0x3A
                 ; 0000 0032                     triggered_sensor_1 = true;
000107 e0e1      	LDI  R30,LOW(1)
000108 2e4e      	MOV  R4,R30
                 ; 0000 0033                     timestamp = time_s;    //mark current time
000109 0153      	MOVW R10,R6
                 ; 0000 0034                 }
                 ; 0000 0035             }
                 _0x3A:
                 ; 0000 0036         if (tc_2==0)
                 _0x39:
00010a 9981      	SBIC 0x10,1
00010b c011      	RJMP _0x3B
                 ; 0000 0037             {
                 ; 0000 0038                 if (triggered_sensor_1) //both sensors are triggered
00010c 2044      	TST  R4
00010d f079      	BREQ _0x3C
                 ; 0000 0039                     {
                 ; 0000 003A                         total_time = time_s - timestamp; //time span between 2 sensors are triggered
00010e 01f3      	MOVW R30,R6
00010f 19ea      	SUB  R30,R10
000110 09fb      	SBC  R31,R11
000111 016f      	MOVW R12,R30
                 ; 0000 003B                         if (total_time < 2)
000112 e0e2      	LDI  R30,LOW(2)
000113 e0f0      	LDI  R31,HIGH(2)
000114 16ce      	CP   R12,R30
000115 06df      	CPC  R13,R31
000116 f410      	BRSH _0x3D
                 ; 0000 003C                             {
                 ; 0000 003D                                 payload=1;
000117 e0e1      	LDI  R30,LOW(1)
000118 c001      	RJMP _0x40
                 ; 0000 003E                             }
                 ; 0000 003F                         else
                 _0x3D:
                 ; 0000 0040                             {
                 ; 0000 0041                                 payload=0;
000119 e0e0      	LDI  R30,LOW(0)
                 _0x40:
00011a 93e0 0160 	STS  _payload,R30
                 ; 0000 0042                             }
                 ; 0000 0043                         triggered_sensor_1 = false; //reset sensor state
00011c 2444      	CLR  R4
                 ; 0000 0044                     }
                 ; 0000 0045 
                 ; 0000 0046             }
                 _0x3C:
                 ; 0000 0047         RF_TX_send(P_Add,payload);   // send command to receiver.
                 _0x3B:
00011d 925a      	ST   -Y,R5
00011e 91a0 0160 	LDS  R26,_payload
000120 df94      	RCALL _RF_TX_send
                 ; 0000 0048         delay_ms(1);
000121 e0a1      	LDI  R26,LOW(1)
000122 e0b0      	LDI  R27,0
000123 d013      	RCALL _delay_ms
                 ; 0000 0049       }
000124 cfdd      	RJMP _0x36
                 ; 0000 004A }
                 _0x3F:
000125 cfff      	RJMP _0x3F
                 ; .FEND
                 
                 	.DSEG
                 _payload:
000160           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x0:
000126 df21      	RCALL _SPI_RW
000127 81a8      	LD   R26,Y
000128 cf1f      	RJMP _SPI_RW
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000129 9aa9      	SBI  0x15,1
                +
00012a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00012b 958a     +DEC R24
00012c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00012d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00012e 81a8      	LD   R26,Y
00012f cff6      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000130 e0e7      	LDI  R30,LOW(7)
000131 93ea      	ST   -Y,R30
000132 e7ae      	LDI  R26,LOW(126)
000133 cf3d      	RJMP _RF_Write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000134 93ea      	ST   -Y,R30
000135 e0a1      	LDI  R26,LOW(1)
000136 cf3a      	RJMP _RF_Write
                 
                 
                 	.CSEG
                 _delay_ms:
000137 9610      	adiw r26,0
000138 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000139 ed80     +LDI R24 , LOW ( 0x7D0 )
00013a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00013b 9701     +SBIW R24 , 1
00013c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00013d 95a8      	wdr
00013e 9711      	sbiw r26,1
00013f f7c9      	brne __delay_ms0
                 __delay_ms1:
000140 9508      	ret
                 
                 __DIVW21U:
000141 2400      	CLR  R0
000142 2411      	CLR  R1
000143 e190      	LDI  R25,16
                 __DIVW21U1:
000144 0faa      	LSL  R26
000145 1fbb      	ROL  R27
000146 1c00      	ROL  R0
000147 1c11      	ROL  R1
000148 1a0e      	SUB  R0,R30
000149 0a1f      	SBC  R1,R31
00014a f418      	BRCC __DIVW21U2
00014b 0e0e      	ADD  R0,R30
00014c 1e1f      	ADC  R1,R31
00014d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00014e 60a1      	SBR  R26,1
                 __DIVW21U3:
00014f 959a      	DEC  R25
000150 f799      	BRNE __DIVW21U1
000151 01fd      	MOVW R30,R26
000152 01d0      	MOVW R26,R0
000153 9508      	RET
                 
                 __MODW21U:
000154 dfec      	RCALL __DIVW21U
000155 01fd      	MOVW R30,R26
000156 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8A register use summary:
r0 :  11 r1 :   7 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   4 r7 :   0 
r8 :   3 r9 :   0 r10:   2 r11:   1 r12:   2 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   9 r26:  40 r27:   7 r28:   3 r29:   1 r30:  90 r31:  11 
x  :   3 y  :  41 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega8A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   5 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  11 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   1 cpi   :   1 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   0 ld    :  10 ldd   :   7 ldi   :  67 lds   :   1 lpm   :   7 
lsl   :   2 lsr   :   0 mov   :   4 movw  :  14 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   1 ori   :   1 out   :  15 
pop   :   0 push  :   0 rcall :  38 ret   :   9 reti  :   1 rjmp  :  36 
rol   :   3 ror   :   0 sbc   :   2 sbci  :   0 sbi   :   8 sbic  :   3 
sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  25 std   :   2 
sts   :   1 sub   :   2 subi  :   1 swap  :   0 tst   :   3 wdr   :   1 

Instructions used: 45 out of 114 (39.5%)

ATmega8A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002ae    668     18    686    8192   8.4%
[.dseg] 0x000060 0x000161      0      1      1    1024   0.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
